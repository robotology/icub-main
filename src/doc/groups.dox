/**
*
* \defgroup icub_modules_all Software
*
* A container for all software in icub-main/src. For clarity 
* this is further divided in groups.
*
*
* (This page can be edited at src/doc/groups.dox)
*
*/

/**
* \defgroup icub_module iCub modules
* @ingroup icub_modules_all
*
*
* This is the list of iCub modules, i.e. executables 
* in the icub-main/src directory.
* To add your own module to this list,
* just add a comment like the following anywhere in your source
* code (replacing "your_module_name" with the name of your module):
\verbatim
  /**
   *
   * \defgroup icub_your_module_name your_module_name
   * @ingroup icub_module
   *
   */
\endverbatim
*
* For convenience, try to keep the module name the same
* as the directory it is placed in.  If you've a good reason
* to do something different, of course you can do that too.
*
* (This page can be edited at src/doc/groups.dox)
*
*/

/**
* \defgroup icub_guis Graphic User Interfaces
* @ingroup icub_modules_all
*
* This is a list of Graphic User Interfaces. Usually in icub-main/src/guis.
*
* To add a module to this group add this to your code:
*
\verbatim
  /**
   * \defgroup icub_your_gui your_gui
   * @ingroup icub_guis
   *
   */
\endverbatim
*
* (This page can be edited at src/doc/groups.dox)
*
*
*/
 
/**
* \defgroup icub_libraries Libraries
* @ingroup icub_modules_all
*
* This is a list of static libraries. Usually in icub-main/src, 
* they are collected here in a group to separate them from the 
* executables (in \ref icub_module \endref).
*
* To add a new library to this group add this to your code:
*
\verbatim
  /**
   * \defgroup icub_your_library your_library
   * @ingroup icub_libraries
   *
   */
\endverbatim
*
* (This page can be edited at src/doc/groups.dox)
*
*
*/

/**
* \defgroup icub_mod_library iCub YARP devices library
* @ingroup icub_modules_all
*
* [YARP devices](http://www.yarp.it/note_devices.html) contained in icub-main .
* The YARP devices are classes that implement one or more YARP virtual
* interfaces. Most often they wrap vendor's libraries for hardware
* devices (dragonfly cameras, or the can bus), and the calibrator classes of the robot.
*
* The compilation of these devices is typically optional and regulated by
* the ENABLE_devicename CMake option.
* The device can be instantiated from the yarpdev or yarprobotinterface executables
* or in the code by using yarp::dev::PolyDriver factory class.
*
* Each device is stored in a directory within icub-main/src/libraries/icubmod .
*
* To add a module to this list please add this in the source code:
*
\verbatim
  /**
   * @ingroup icub_mod_library
   * @brief `yarpdevicename` : device description.
   *
   */
\endverbatim
*
* (This page can be edited at src/doc/groups.dox)
*/

/**
* \defgroup icub_hardware_modules Hardware YARP devices
* @ingroup icub_mod_library
*
* YARP devices that provide access to the robot hardware.
*
* To add a device to this list please add this in the source code:
*
\verbatim
  /**
   * @ingroup icub_hardware_modules
   * @brief `yarpdevicename` : device description.
   *
   */
\endverbatim
*
* (This page can be edited at src/doc/groups.dox)
*/

/**
* \defgroup icub_calibrators Calibrator YARP devices
* @ingroup icub_mod_library
*
* YARP devices that contain the routines
* for calibrating the robot at startup. They are very 
* iCub specific.
*
* To add a module to this group add this in the doxygen block of the device class:
*
\verbatim
  /**
   * @ingroup icub_calibrators
   * @brief `yarpdevicename` : device description.
   *
   */
\endverbatim
*
* (This page can be edited at src/doc/groups.dox)
*/

/**
* \defgroup icub_tools Tools
* @ingroup icub_modules_all
*
* This is a list of iCub basic tools.
*
\verbatim
  /**
   * \defgroup icub_your_tool your_tool
   * @ingroup icub_tools
   *
   */
\endverbatim
*
* (This page can be edited at src/doc/groups.dox)
*
*/


/**
*
* \defgroup icub_applications Applications
*
* The app directory stores directories which group
* sets of configuration files and scripts to run
* a certain group of modules together. Each one 
* of them is what we call an application. In other
* words, an application is an instantiation of
* a set of modules that run at the same time.
*
* Some of these applications are iCub capabilities, 
* others might just be nice demos or experiments.
*
* Documentation for each application goes in each 
* directory.
*
* Ideally these directories will contain only scripts 
* and ini/txt files. Use src to store source code. 
*
* This file can be edited at src/doc/groups.dox
*/
