/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Mon May 26 17:13:52 2025


#include "RawValuesPublisherServer_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(RawValuesPublisherServerParamsCOMPONENT, "yarp.device.RawValuesPublisherServer")
}


RawValuesPublisherServer_ParamsParser::RawValuesPublisherServer_ParamsParser()
{
}


std::vector<std::string> RawValuesPublisherServer_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("name");
    params.push_back("period");
    return params;
}


bool      RawValuesPublisherServer_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(RawValuesPublisherServerParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter name
    {
        if (config.check("name"))
        {
            m_name = config.find("name").asString();
            yCInfo(RawValuesPublisherServerParamsCOMPONENT) << "Parameter 'name' using value:" << m_name;
        }
        else
        {
            yCError(RawValuesPublisherServerParamsCOMPONENT) << "Mandatory parameter 'name' not found!";
            yCError(RawValuesPublisherServerParamsCOMPONENT) << "Description of the parameter: Prefix of the port opened by this device";
            return false;
        }
        prop_check.unput("name");
    }

    //Parser of parameter period
    {
        if (config.check("period"))
        {
            m_period = config.find("period").asInt64();
            yCInfo(RawValuesPublisherServerParamsCOMPONENT) << "Parameter 'period' using value:" << m_period;
        }
        else
        {
            yCError(RawValuesPublisherServerParamsCOMPONENT) << "Mandatory parameter 'period' not found!";
            yCError(RawValuesPublisherServerParamsCOMPONENT) << "Description of the parameter: Refresh period of the broadcasted values in ms";
            yCError(RawValuesPublisherServerParamsCOMPONENT) << "Remember: Units for this parameter are: 'ms'";
            return false;
        }
        prop_check.unput("period");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(RawValuesPublisherServerParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(RawValuesPublisherServerParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      RawValuesPublisherServer_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: RawValuesPublisherServer\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'name': Prefix of the port opened by this device\n");
    doc = doc + std::string("'period': Refresh period of the broadcasted values in ms\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device rawValuesPublisherServer --name <mandatory_value> --period <mandatory_value>\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device rawValuesPublisherServer --name <mandatory_value> --period <mandatory_value>\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
