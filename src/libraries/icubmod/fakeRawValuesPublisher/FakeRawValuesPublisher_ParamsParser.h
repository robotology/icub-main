/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Fri Oct  4 16:28:45 2024


#ifndef FAKERAWVALUESPUBLISHER_PARAMSPARSER_H
#define FAKERAWVALUESPUBLISHER_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
// #include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>
#include <vector>

/**
* This class is the parameters parser for class FakeRawValuesPublisher.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value | Required | Description                                                                                               | Notes |
* |:----------:|:--------------:|:------:|:-----:|:-------------:|:--------:|:---------------------------------------------------------------------------------------------------------:|:-----:|
* | -          | name           | string | -     | -             | 1        | Name of the device                                                                                        | -     |
* | -          | njomos         | int    | -     | -             | 1        | Number of joint or motors to be instantiated                                                              | -     |
* | -          | threshold      | int    | -     | -             | 1        | Threshold used for defining the amplitude of the sawthooth curve that simulates periodic raw encoder data | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device fakeRawValuesPublisher --name <mandatory_value> --njomos <mandatory_value> --threshold <mandatory_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device fakeRawValuesPublisher --name <mandatory_value> --njomos <mandatory_value> --threshold <mandatory_value>
* \endcode
*
*/

class FakeRawValuesPublisher_ParamsParser
{
public:
    FakeRawValuesPublisher_ParamsParser();
    ~FakeRawValuesPublisher_ParamsParser() = default;

public:
    const std::string m_device_classname = {"FakeRawValuesPublisher"};
    const std::string m_device_name = {"fakeRawValuesPublisher"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_name_defaultValue = {""};
    const std::string m_njomos_defaultValue = {""};
    const std::string m_threshold_defaultValue = {""};

    std::string m_name = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    int m_njomos = {0}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    int m_threshold = {0}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.

    bool          parseParams(const yarp::os::Searchable & config);
    std::string   getDeviceClassName() const { return m_device_classname; }
    std::string   getDeviceName() const { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const;
    std::vector<std::string> getListOfParams() const;
};

#endif
