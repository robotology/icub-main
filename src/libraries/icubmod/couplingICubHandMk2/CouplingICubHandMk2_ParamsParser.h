/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Nov 28 16:55:27 2024


#ifndef COUPLINGICUBHANDMK2_PARAMSPARSER_H
#define COUPLINGICUBHANDMK2_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class CouplingICubHandMk2.
*
* These are the used parameters:
* | Group name      | Parameter name     | Type           | Units | Default Value | Required | Description                                    | Notes                            |
* |:---------------:|:------------------:|:--------------:|:-----:|:-------------:|:--------:|:----------------------------------------------:|:--------------------------------:|
* | -               | jointNames         | vector<string> | -     | -             | 1        | Names of the physical joints                   | -                                |
* | LIMITS          | jntPosMin          | vector<double> | -     | -             | 1        | Physical joints' position minimum              | -                                |
* | LIMITS          | jntPosMax          | vector<double> | -     | -             | 1        | Physical joints' position maximum              | -                                |
* | COUPLING        | device             | string         | -     | -             | 1        | Name of the device that handles the coupling   | -                                |
* | COUPLING        | actuatedAxesNames  | vector<string> | -     | -             | 1        | Names of the actuated axes                     | -                                |
* | COUPLING        | actuatedAxesPosMin | vector<double> | -     | -             | 1        | Actuated axes' position minimum                | -                                |
* | COUPLING        | actuatedAxesPosMax | vector<double> | -     | -             | 1        | Actuated axes' position maximum                | -                                |
* | COUPLING_PARAMS | L0x                | vector<double> | -     | -             | 1        | x coordinate of the first end of the lever is  | The length of the list must be 5 |
* | COUPLING_PARAMS | L0y                | vector<double> | -     | -             | 1        | y coordinate of the first end of the lever is  | The length of the list must be 5 |
* | COUPLING_PARAMS | q2bias             | vector<double> | -     | -             | 1        | Angle of L1 - P1 when the finger is fully open | The length of the list must be 5 |
* | COUPLING_PARAMS | q1off              | vector<double> | -     | -             | 1        | Angle of P1 - P0 when the finger is closed     | The length of the list must be 5 |
* | COUPLING_PARAMS | k                  | vector<double> | -     | -             | 1        | Connecting rod length, L1-L0                   | The length of the list must be 5 |
* | COUPLING_PARAMS | d                  | vector<double> | -     | -             | 1        | Distance between the two joints, P1 and P0     | The length of the list must be 5 |
* | COUPLING_PARAMS | l                  | vector<double> | -     | -             | 1        | Distance between L1 and P1                     | The length of the list must be 5 |
* | COUPLING_PARAMS | b                  | vector<double> | -     | -             | 1        | Distance between L0 and P0                     | The length of the list must be 5 |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device couplingICubHandMk2 --jointNames <mandatory_value> --LIMITS::jntPosMin <mandatory_value> --LIMITS::jntPosMax <mandatory_value> --COUPLING::device <mandatory_value> --COUPLING::actuatedAxesNames <mandatory_value> --COUPLING::actuatedAxesPosMin <mandatory_value> --COUPLING::actuatedAxesPosMax <mandatory_value> --COUPLING_PARAMS::L0x <mandatory_value> --COUPLING_PARAMS::L0y <mandatory_value> --COUPLING_PARAMS::q2bias <mandatory_value> --COUPLING_PARAMS::q1off <mandatory_value> --COUPLING_PARAMS::k <mandatory_value> --COUPLING_PARAMS::d <mandatory_value> --COUPLING_PARAMS::l <mandatory_value> --COUPLING_PARAMS::b <mandatory_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device couplingICubHandMk2 --jointNames <mandatory_value> --LIMITS::jntPosMin <mandatory_value> --LIMITS::jntPosMax <mandatory_value> --COUPLING::device <mandatory_value> --COUPLING::actuatedAxesNames <mandatory_value> --COUPLING::actuatedAxesPosMin <mandatory_value> --COUPLING::actuatedAxesPosMax <mandatory_value> --COUPLING_PARAMS::L0x <mandatory_value> --COUPLING_PARAMS::L0y <mandatory_value> --COUPLING_PARAMS::q2bias <mandatory_value> --COUPLING_PARAMS::q1off <mandatory_value> --COUPLING_PARAMS::k <mandatory_value> --COUPLING_PARAMS::d <mandatory_value> --COUPLING_PARAMS::l <mandatory_value> --COUPLING_PARAMS::b <mandatory_value>
* \endcode
*
*/

class CouplingICubHandMk2_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    CouplingICubHandMk2_ParamsParser();
    ~CouplingICubHandMk2_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"CouplingICubHandMk2"};
    const std::string m_device_name = {"couplingICubHandMk2"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_jointNames_defaultValue = {""};
    const std::string m_LIMITS_jntPosMin_defaultValue = {""};
    const std::string m_LIMITS_jntPosMax_defaultValue = {""};
    const std::string m_COUPLING_device_defaultValue = {""};
    const std::string m_COUPLING_actuatedAxesNames_defaultValue = {""};
    const std::string m_COUPLING_actuatedAxesPosMin_defaultValue = {""};
    const std::string m_COUPLING_actuatedAxesPosMax_defaultValue = {""};
    const std::string m_COUPLING_PARAMS_L0x_defaultValue = {""};
    const std::string m_COUPLING_PARAMS_L0y_defaultValue = {""};
    const std::string m_COUPLING_PARAMS_q2bias_defaultValue = {""};
    const std::string m_COUPLING_PARAMS_q1off_defaultValue = {""};
    const std::string m_COUPLING_PARAMS_k_defaultValue = {""};
    const std::string m_COUPLING_PARAMS_d_defaultValue = {""};
    const std::string m_COUPLING_PARAMS_l_defaultValue = {""};
    const std::string m_COUPLING_PARAMS_b_defaultValue = {""};

    std::vector<std::string> m_jointNames = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_LIMITS_jntPosMin = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_LIMITS_jntPosMax = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::string m_COUPLING_device = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<std::string> m_COUPLING_actuatedAxesNames = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_actuatedAxesPosMin = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_actuatedAxesPosMax = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_PARAMS_L0x = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_PARAMS_L0y = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_PARAMS_q2bias = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_PARAMS_q1off = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_PARAMS_k = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_PARAMS_d = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_PARAMS_l = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_PARAMS_b = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
