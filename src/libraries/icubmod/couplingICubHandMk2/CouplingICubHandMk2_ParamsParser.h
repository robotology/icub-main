/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Fri Nov 29 12:03:55 2024


#ifndef COUPLINGICUBHANDMK2_PARAMSPARSER_H
#define COUPLINGICUBHANDMK2_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class CouplingICubHandMk2.
*
* These are the used parameters:
* | Group name | Parameter name     | Type           | Units | Default Value | Required | Description                                  | Notes |
* |:----------:|:------------------:|:--------------:|:-----:|:-------------:|:--------:|:--------------------------------------------:|:-----:|
* | -          | jointNames         | vector<string> | -     | -             | 1        | Names of the physical joints                 | -     |
* | LIMITS     | jntPosMin          | vector<double> | -     | -             | 1        | Physical joints' position minimum            | -     |
* | LIMITS     | jntPosMax          | vector<double> | -     | -             | 1        | Physical joints' position maximum            | -     |
* | COUPLING   | device             | string         | -     | -             | 1        | Name of the device that handles the coupling | -     |
* | COUPLING   | actuatedAxesNames  | vector<string> | -     | -             | 1        | Names of the actuated axes                   | -     |
* | COUPLING   | actuatedAxesPosMin | vector<double> | -     | -             | 1        | Actuated axes' position minimum              | -     |
* | COUPLING   | actuatedAxesPosMax | vector<double> | -     | -             | 1        | Actuated axes' position maximum              | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device couplingICubHandMk2 --jointNames <mandatory_value> --LIMITS::jntPosMin <mandatory_value> --LIMITS::jntPosMax <mandatory_value> --COUPLING::device <mandatory_value> --COUPLING::actuatedAxesNames <mandatory_value> --COUPLING::actuatedAxesPosMin <mandatory_value> --COUPLING::actuatedAxesPosMax <mandatory_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device couplingICubHandMk2 --jointNames <mandatory_value> --LIMITS::jntPosMin <mandatory_value> --LIMITS::jntPosMax <mandatory_value> --COUPLING::device <mandatory_value> --COUPLING::actuatedAxesNames <mandatory_value> --COUPLING::actuatedAxesPosMin <mandatory_value> --COUPLING::actuatedAxesPosMax <mandatory_value>
* \endcode
*
*/

class CouplingICubHandMk2_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    CouplingICubHandMk2_ParamsParser();
    ~CouplingICubHandMk2_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"CouplingICubHandMk2"};
    const std::string m_device_name = {"couplingICubHandMk2"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_jointNames_defaultValue = {""};
    const std::string m_LIMITS_jntPosMin_defaultValue = {""};
    const std::string m_LIMITS_jntPosMax_defaultValue = {""};
    const std::string m_COUPLING_device_defaultValue = {""};
    const std::string m_COUPLING_actuatedAxesNames_defaultValue = {""};
    const std::string m_COUPLING_actuatedAxesPosMin_defaultValue = {""};
    const std::string m_COUPLING_actuatedAxesPosMax_defaultValue = {""};

    std::vector<std::string> m_jointNames = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_LIMITS_jntPosMin = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_LIMITS_jntPosMax = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::string m_COUPLING_device = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<std::string> m_COUPLING_actuatedAxesNames = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_actuatedAxesPosMin = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_COUPLING_actuatedAxesPosMax = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
